"use strict";(self.webpackChunkmarathon_training_app=self.webpackChunkmarathon_training_app||[]).push([[225],{225:(e,t,r)=>{r.d(t,{extractHistoryData:()=>o,parseAndNormalizeCSV:()=>s});var n=r(766),a=r.n(n);function s(e){const t=a().parse(e,{header:!0,skipEmptyLines:!0,error:e=>{console.error("CSV parsing error:",e)}});if(!t.data||0===t.data.length)return console.error("No data found in CSV"),[];const r=t.data[0],n=function(e){if(e.includes("Name")&&e.includes("Sets")&&e.includes("Reps"))return"standard";const t=e.filter((e=>/^[A-Z]$/.test(e)));if(t.length>=5)return"lettered";const r=e.filter((e=>/^\d+$/.test(e)));if(r.length>0)return"numbered";return"custom"}(Object.keys(r));console.log("Detected spreadsheet format:",n);const s=function(e,t){if("standard"===t)return e;if("lettered"===t)return e.map((e=>({A:e.A||"",B:e.B||"",C:e.C||"",D:e.D||"",E:e.E||"",F:e.F||"",G:e.G||"",H:e.H||"",I:e.I||"",...e})));return e.map((e=>{const t={...e},r=Object.keys(e),n=r.find((e=>e.toLowerCase().includes("exercise")||e.toLowerCase().includes("name")||e.toLowerCase().includes("movement")));n&&(t.B=e[n]);const a=r.find((e=>e.toLowerCase().includes("set")));a&&(t.C=e[a]);const s=r.find((e=>e.toLowerCase().includes("rep")||e.toLowerCase().includes("count")));s&&(t.D=e[s]);const o=r.find((e=>e.toLowerCase().includes("tempo")));o&&(t.E=e[o]);const d=r.find((e=>e.toLowerCase().includes("load")||e.toLowerCase().includes("weight")||e.toLowerCase().includes("kg")));d&&(t.F=e[d]);const c=r.find((e=>e.toLowerCase().includes("rest")));c&&(t.G=e[c]);const i=r.find((e=>e.toLowerCase().includes("note")));return i&&(t.I=e[i]),t}))}(t.data,n);return s}function o(e){const t={},r=[];if(0===e.length)return t;const n=e[0];return Object.keys(n).forEach((e=>{if(["A","B","C","D","E","F","G","H","I"].includes(e))return;const t=function(e){if(!e||""===e.trim())return null;const t=[{regex:/^(\d{1,2})\/(\d{1,2})\/(\d{2})$/,parse:e=>new Date(`20${e[3]}-${e[2].padStart(2,"0")}-${e[1].padStart(2,"0")}`)},{regex:/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/,parse:e=>new Date(`${e[3]}-${e[2].padStart(2,"0")}-${e[1].padStart(2,"0")}`)},{regex:/^(\d{1,2})\/(\d{1,2})\/(\d{2})$/,parse:e=>new Date(`20${e[3]}-${e[1].padStart(2,"0")}-${e[2].padStart(2,"0")}`)},{regex:/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/,parse:e=>new Date(`${e[3]}-${e[1].padStart(2,"0")}-${e[2].padStart(2,"0")}`)},{regex:/^(\d{4})-(\d{1,2})-(\d{1,2})$/,parse:e=>new Date(`${e[1]}-${e[2].padStart(2,"0")}-${e[3].padStart(2,"0")}`)}];for(const n of t){const t=e.match(n.regex);if(t)try{const e=n.parse(t);if(!isNaN(e.getTime()))return e}catch(r){}}return null}(e);t&&r.push({column:e,date:t})})),r.sort(((e,t)=>e.date-t.date)),e.forEach(((e,n)=>{if(!e.A||!e.B||!e.A.match(/^[A-Z]\d+$/)&&!e.B.match(/^[A-Z]\d+$/))return;const a=`exercise-${n}`,s=[];r.forEach((t=>{const r=e[t.column];r&&""!==r.trim()&&s.push({date:t.date.toISOString().split("T")[0],value:r})})),s.length>0&&(t[a]=s)})),t}}}]);
//# sourceMappingURL=225.79d52734.chunk.js.map